Terraform:

Introduction:

Key concepts:
1. Infrastructure as a code

Managing and provisioning of infrastructure through code instead of manually
Files that contain configurations are created and makes it easy to edit and distribute
Ensures that the same environment is provisioned everytime.
Helps avoid undocumented, ad-hoc configuration changes
Easy to version control
can create infrastructure in modular components


Gives you a template to follow for provisioning b) Benefits:
cost reduction
increase the speed of deployment
reduce errors
Improve infrastructure consistency
Eliminate configuration drift


What is Terraform:

IaaC tool from Hashicorp
Used to building, changing and Managing infrastructure in a safe, repeatable way
Uses HCL - Hashicorp Configuration Language - human readable.
Reads configuration files and provides an execution plan which can be reviewed before being applied.
It is platform agnostic - can manage a heterogeneous environment - multi cloud.
State management - creates a state file when a project is first initialized. 
Uses this state file to create plans and make changes based on the desired and 
current state of the infrastructure.
Creates operator confidence

Terraform Configuration Files:

Terraform uses declarative syntax to describe your Infrastructure as Code (IaC) 
infrastructure and then persist it in configuration files that can be shared, 
reviewed, edited, versioned, preserved, and reused.


Terraform configuration files can use either of two formats: 
Terraform domain-specific 
language (HashiCorpConfiguration Language format [HCL]), which is the recommended approach, 
or JSON format if the files need to be machine-readable.
Configuration files that use the HCL format end with the .tf file extension;
Those using JSON format end with the .tf.json file extension.
The Terraform format is human-readable, while the JSON format is machine readable



provider "aws" {
  project = "acme-app"
  region  = "us-central1"
}



------------------------------------------------------------------
Terraform Installation:

Windows OS
Mac OS
Linux OS

A) Prerequisites
* Install Terraform CLI
* Install AWS CLI
* Install VS Code Editor - recommended for this course
* Install HashiCorp Terraform plugin for VS Code - recommended


Linux:

 sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
 curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
 sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
 sudo apt-get update && sudo apt-get install terraform


To confirm terraform installation:
terraform
terraform --version



-------------------------------------------------------------------
Install Terraform on Windows:
Download Terraform  == https://www.terraform.io/downloads
Install CLI  ==  https://learn.hashicorp.com/tutorials/terraform/install-cli
Unzip the package  ==  https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html
Create new folder binaries
Copy the terraform.exe to the new folder


------------------------------------------------------------------------



provider "aws" {
  region  = "us-east-2"
  #profile "efe"
}

resource "aws_instance" "first_demo" {
  ami = "ami-00978328f54e31526" 
  instance_type = "t2.micro"
}



terraform init
$ terraform init: 
# Initialise to install plugins  
The terraform init command is used to initialize a working directory 
containing Terraform configuration files. This is the first command that 
should be run after writing a new Terraform configuration or cloning an 
existing one from version control.

terraform validate:
# Validate terraform scripts 
# validates terraform scripts which will list resources which is going  be created. 
The terraform validate command validates the configuration files in a directory, 
referring only to the configuration and not accessing any remote services such as
 remote state, provider APIs, etc.


terraform plan:  
# The terraform plan command evaluates a Terraform configuration to determine 
the desired state of all the resources it declares, then compares that desired 
state to the real infrastructure objects being managed with the current working 
directory and workspace. It uses state data to determine which real objects 
correspond to which declared resources, and checks the current state of each 
resource using the relevant infrastructure provider's API.


terraform apply:



Main commands:
  init          Prepare your working directory for other commands
  validate      Check whether the configuration is valid
  plan          Show changes required by the current configuration
  apply         Create or update infrastructure
  destroy       Destroy previously-created infrastructure


Terraform Configuration Language syntax:

Step 1: Blocks
* Terraform settings block
* Provider block
* Resource Block
* Input Block
* Output Block
* Local Values Block
* Data Source Block
* Modules Block


provider "google" {

}


<BLOCK type> "BLOCK Label" "Blocks label"


terraform

dev
ec3.tf
main.tf
security.tf


Input variable block:

variable "aws_instance" "cohort7" {
  default = "t2.micro" 
  ami = "ami-00978328f54e31526" 
  instance_type = "t2.micro"
}


Output Variable Block:
  output "ec2_instance_publicip" {
    description = "Ec2 Instance Public IP"
    value = aws_instance.cohort7.public_ip
  }



Local Values Block:

terraform file  = GitHub

statefile  = S3 bucket

locals {
  name = "${var.app_name}-${var.environment_name}"
}



bucket_name = locals.name



Block type:

Arguments:
  They assign a value to a name. they appear with the block. 
  Arguments can be required or optional

Expressions:
  They represent a value, either litterally or by referencing and combining other values.
  They appear as values for Arguments, or within other expressions.

Attributes:
  - They represent a named piece of data that belongs to some kind of object. 
  The value of an attribute can be referenced in expressions using a dot-separated notation, 
  like aws_instance.example.id.
- The format looks like `resource_type.resource_name.attribute_name`

Identifiers:
  - Argument names, block type names, and the names of most Terraform-specific constructs 
  like resources, input variables, etc. are all identifiers.

comments:
  #
  //   single line

  multi line:
    /*    and    */


meta-arguments:
can change the behavior of a resource type
Example
  count   = numeric form
  for_each
  each.key
  each.value


map:

    resource "azurerm_resource_group" "rg" {
    for_each = {
      a_group = "eastus"
      another_group = "westus2"
    }
    name     = each.key
    location = each.value
  }

set of Strings:
resource "aws_user" "the_account" {
  for_each = toset(["Chidi", "Yusuf", "Hope", "Paul"])
  name = each.key
}


=======================================================================

Project 1:
1. Create a new folder /directory called: Project 1
2. Create a VPC named "FirstVPC"
3. CIDR range 192.168.0.0/24


=========================================================

terraform {
  required_providers {
    aws = {
        source = "hashicorp/aws"
        version = "~> 4.0"
    }
  }
}


provider "aws" {
    region = "us-east-2"
  #profile = "default"
}

resource "aws_vpc" "FirstVPC" {
  cidr_block = "192.168.0.0/24"

  tags = {
    "Name" = "FirstVPC"
  }
}


variable "vpc"
desciption = "My first VPC Creation"
defualt = 


BLOCK Type BLOCK Lable BLOCK Label



===============================================================

terraform {
  required_providers {
    aws = {
        source = "hashicorp/aws"
        version = "~> 4.0"
    }
  }
}


provider "aws" {
    region = var.my_region
  #profile = "default"
}



resource "aws_instance" "first_demo" {
  ami = var.my_ami
  instance_type = var.aws_instance

  tags = {
    "Name" = "dev"
  }
}


=================================================================

resource "aws_security_group" "first_demo_SG" {
  name        = "first_demo_SG"
  description = "Allow TLS inbound traffic"

  ingress {
    description      = "TLS from VPC"
    from_port        = 443
    to_port          = 443
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
  }

  tags = {
    Name = "first_demo_SG"
  }
}

===================================================================
variable "aws_instance" {
  description = "The aws instance type"
  type = string
  default = "t2.micro"
}

variable "my_ami" {
    description = "The aws instance ami"
    type = string
    default = "ami-00978328f54e31526"
}

variable "my_region" {
    description = "My aws region"
    type = string
    default = "us-east-2"
}

======================================================
Data source:

data "aws_ami" "amzlinux2" {
  most_recent      = true
  owners           = ["amazon"]

  filter {
    name   = "name"
    values = ["amzn2-ami-hvm-*-gp2"]       

  filter {
    name   = "root-device-type"
    values = ["ebs"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  filter {
    name   = "architecure"
    values = ["x86_64"]
  }
}



https://learn.hashicorp.com/tutorials/terraform/docker-destroy?in=terraform/docker-get-started

=============================================

# Terraform output variable

# EC2 Instance Public IP
output "instance_publicip" {
    description = "EC2 instance Public IP"
    value = aws_instance.first_demo.public_ip
}

# EC2 Instance Public DNS
output "instance_publicdns" {
    description = "EC2 instance public DNS"
    value = aws_instance.first_demo.public_dns
}

====================================================

Dynamic Block:

Ingress: 80 , 443 , 8080

egress: 80 , 443 , 25 , 3306 , 53 , 8080




variable "ingressrules" {
  type = list(number)
  default = [80,443,8080]
}

variable "egressrules" {
  type = list(number)
  default = [80,443,25,53,8080,3306]
}


resource "aws_security_group" "first_demo_SG" {
  name        = "first_demo_SG"
  description = "Allow TLS inbound traffic"

  dynamic "ingress" {
    iterator         = port
    for_each         = var.ingressrules
    content {       
    from_port        = port.value
    to_port          = port.value
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }
}

  dynamic "egress" {
    iterator         = port
    for_each         = var.egressrules
    content {
    from_port        = port.value
    to_port          = port.value
    protocol         = "TCP"
    cidr_blocks      = ["0.0.0.0/0"]
  }
}

  tags = {
    Name = "first_demo_SG"
  }
}


=============================================================


variable "instance_type_list"
desciption = EC2 instance type
type = list(string)
defualt = ["t2.micro", "t2.medium", "t3.large"]



===========================================================
Modules:

A module is a container for multiple resources that are used together. 
You can use modules to create lightweight abstractions, so that you can 
describe your infrastructure in terms of its architecture, 
rather than directly in terms of physical objects.

* Enable code  resuse
* Supports versioning to maintain compactability
* Stores code remotely
* Enable easier testing
* Enables encapsulation with all the seperate resources under one configuration block
* Modules can be nested inside other module, allowing you to quickly spin ip whole seperate environmments
* can be reffered using source attributes

Support backend:
  - local path
  - terraform registry
  - Github
  - Bitbucket
  - HTTP URLs
  - S3 bucket
  - GSC bucket

  Module requirements:

  - Must be on Github, Gitlab and must be public repo, if you are using public registry
  - Must be on Github, Gitlab and must be private repo, if you are using private registry
  - Must be named terraform <PROVIDER>-<NAME>, where <NAME> reflects the type of infrastructure the 
  module manages and <PROVIDER> is the main provider where it creats the infrastructure
  eg. terraform-google-vault or terraform-aws-ec2-instance
  - Must maintain a standard module structure, which allow the registry to inspect the module and generate decumentation,
  track the resource usage,
