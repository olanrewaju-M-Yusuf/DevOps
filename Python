{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Agenda for the Python Training Program:\n",
    "\n",
    "LECTURE ONE:\t2 - 3 hours Tuesday November 15th, 2022 at 7pm - 10pm MST\n",
    "1.1 Introduction to Python\n",
    "- Definition\n",
    "What is Python:\n",
    "Python is a high level general purpose programming language. \n",
    "Python is general purpose because it can be used in various \n",
    "occupations by software engineers, data analysts, mathematicians,\n",
    "scientists, accountants, network engineers, etc. In fact, \n",
    "Python is the ideal programming language to learn first.\n",
    "So with python, you can solve complex problems with just \n",
    "few lines of code. \n",
    "\n",
    "- Use Cases\n",
    "Application Areas of Python:\n",
    "Web-application development\n",
    "API Development\n",
    "Data Analysis\n",
    "Artificial Intelligence\n",
    ".\n",
    ".\n",
    ". \n",
    "Automation (This is what matters to us as DevOps Engineers)\n",
    "\n",
    "- Python Installation \n",
    "*We are using VSCode for hands-on practice. \n",
    "Useful code editors to have: 1. Pycharm     2. Sublime      3. Atom\n",
    "\n",
    "- Popular Organisations that use Pythong\n",
    "Five most popular companies that use Python:\n",
    "  1. Youtube\n",
    "  2. Spotify\n",
    "  3. Instagram\n",
    "  4. Dropbox\n",
    "  5. Pinterest \n",
    "  6. Facebook\n",
    "\n",
    "  What makes Python very popular:\n",
    "  - easy to learn\n",
    "  - pre-defined and third party modules (samples) to use. 147k modules\n",
    "  - code length is very short because of the availability of modules.\n",
    "  - platform independent. you can use it on any OS. \n",
    "  Python has been around for over 20 years.\n",
    "\n",
    "1.2 Print Functions \n",
    "1.3 Literals \n",
    "1.4 Arithmetric Operators \n",
    "1.5 Python Variables \n",
    "1.6 Input Functions \n",
    "1.7 String"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to Acada Learning\n"
     ]
    }
   ],
   "source": [
    "# 1.2 Print Functions in Python\n",
    "# in bash we use echo \n",
    "# in python, we use print \n",
    "print(\"Welcome to Acada Learning\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to Acada Learning\n"
     ]
    }
   ],
   "source": [
    "print('Welcome to Acada Learning')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcomne to Acada Learning Comrades\n"
     ]
    }
   ],
   "source": [
    "print(\"Welcomne\", \"to\", \"Acada\", \"Learning\", \"Comrades\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Key word arguments to print functions:\n",
    "    Keyword arguments (or named arguments) are values that, \n",
    "    when passed into a function, are identifiable by specific \n",
    "    parameter names. A keyword argument is preceded by a parameter \n",
    "    and the assignment operator, =.\n",
    "1. end=\"\"\n",
    "2. sep=\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello! Python is a great programming language\n"
     ]
    }
   ],
   "source": [
    "print(\"Hello\", end=\"! \");\\\n",
    "    print(\"Python is a great programming language\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello! DevOps Engineers Cheers\n",
      "So, are you enjoying python so far? I guess YOU ARE"
     ]
    }
   ],
   "source": [
    "print(\"Hello\", \"DevOps Engineers\", sep=\"! \", end=\" Cheers\\n\");\\\n",
    "    print(\"So\", \"are you enjoying python so far?\", sep=\", \", end=\" I guess YOU ARE\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Assignment 1\n",
    "a. print(1, 2, 3, 4, sep='#', end='&')\n",
    "b. print(\"Hello\" + \" \" \"future\" + \" \" \"DevOps Engineers!\")\n",
    "c. print(\"My account balance is \" + 7000)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1#2#3#4&"
     ]
    }
   ],
   "source": [
    "print(1, 2, 3, 4, sep='#', end='&')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello future DevOps Engineers!\n"
     ]
    }
   ],
   "source": [
    "print(\"Hello\" + \" \" \"future\" + \" \" \"DevOps Engineers!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "can only concatenate str (not \"int\") to str",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32mc:\\Users\\jngha\\OneDrive\\Desktop\\PythonTeach\\AcadaPython_Class_2022.ipynb Cell 12\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> <a href='vscode-notebook-cell:/c%3A/Users/jngha/OneDrive/Desktop/PythonTeach/AcadaPython_Class_2022.ipynb#X16sZmlsZQ%3D%3D?line=0'>1</a>\u001b[0m \u001b[39mprint\u001b[39m(\u001b[39m\"\u001b[39;49m\u001b[39mMy account balance is \u001b[39;49m\u001b[39m\"\u001b[39;49m \u001b[39m+\u001b[39;49m \u001b[39m7000\u001b[39;49m)\n",
      "\u001b[1;31mTypeError\u001b[0m: can only concatenate str (not \"int\") to str"
     ]
    }
   ],
   "source": [
    "print(\"My account balance is \" + 7000)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1.3 LITERALS \n",
    "1. Integers  aka int\n",
    "eg. 1, 2, ......., 90, ......, 180,000\n",
    "When dealing with integers you don't need a quotation mark\n",
    "\n",
    "2. Floating Point Numbers (Float) aka fl\n",
    "eg. 1.1, ....., 52.08, ......, infinity\n",
    "When dealing with floats you don't need a quotation mark\n",
    "\n",
    "3. Strings aka str\n",
    "eg. mango, winter, money, DevOps Engineer, etc\n",
    "We need a single or double quotation\n",
    "\n",
    "4. Booleans aka bool\n",
    "eg. True and False\n",
    "Numeric false 0\n",
    "Numeric true 1 \n",
    "no quotation mark is needed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'str'>\n"
     ]
    }
   ],
   "source": [
    "print(type(\"hello\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'float'>\n"
     ]
    }
   ],
   "source": [
    "print(type(45.55))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'int'>\n"
     ]
    }
   ],
   "source": [
    "print(type(3_00_0000_000))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "int"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(type(3_00_0000_000))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1.4 ARITHMETRIC OPERATORS \n",
    "Addition +\n",
    "eg. print(2 + 4)  ==>> output is 6\n",
    "\n",
    "Subtraction - \n",
    "eg. print(8 - 2)  ==>> output 6\n",
    "\n",
    "Multiplication * \n",
    "eg. print(3 * 2)  ==>> output 6\n",
    "\n",
    "Division /          NB: Whenever you use a division, the output would be a float\n",
    "eg. print(12 / 2) ==> output 6\n",
    "eg. print(13 / 2) ==> output 6.5\n",
    "\n",
    "Floor or Double Division //         NB: This will always produce a whole number\n",
    "eg. print(13 // 2)  ==> output 6\n",
    "\n",
    "Modular Operator %\n",
    "eg. print(15 % 4)  ==> output 3\n",
    "\n",
    "Exponential/Power Operator **\n",
    "eg. print(2 ** 3)  ==> output 8\n",
    "\n",
    "NB: Python uses what we call BODMAS in Math in performing Arithmetric Operations\n",
    "B = Brackets\n",
    "O = Orders (indices or powers or roots)\n",
    "D = Division \n",
    "M = Multiplication\n",
    "A = Addition\n",
    "S = Subtraction \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "162\n"
     ]
    }
   ],
   "source": [
    "print(2 * 3 ** 4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-29.0\n"
     ]
    }
   ],
   "source": [
    "print(10 - 6 ** 2 / 9 * 10 + 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0\n"
     ]
    }
   ],
   "source": [
    "print(6. // 4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n"
     ]
    }
   ],
   "source": [
    "print(2 * (2 + 3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5.0\n"
     ]
    }
   ],
   "source": [
    "x = 10 / 4\n",
    "y = 5 / 2.0\n",
    "print(x + y)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4.25\n"
     ]
    }
   ],
   "source": [
    "print(13 / 4 + 13 % 4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1.5 PYTHON VARIABLES \n",
    "We use variables to temporarily store data in the compute memory. \n",
    "\n",
    "Python reads commands from top to bottom"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30\n"
     ]
    }
   ],
   "source": [
    "age = 20\n",
    "age = 30\n",
    "print(age)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Defining variables in Python\n",
    "Dela_Amos = \"cohort 8\"\n",
    "True, False, print, and, or, else, etc. We don't define python variables with the items on this line. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Orange\n",
      "Banana\n",
      "Cherry\n"
     ]
    }
   ],
   "source": [
    "x, y, z = \"Orange\", \"Banana\", \"Cherry\"\n",
    "print(x)\n",
    "print(y)\n",
    "print(z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Orange Banana Cherry\n"
     ]
    }
   ],
   "source": [
    "x, y, z = \"Orange\", \"Banana\", \"Cherry\"\n",
    "print(x, y, z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Acada\n"
     ]
    }
   ],
   "source": [
    "y = 5\n",
    "y = \"Acada\"\n",
    "print(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "16\n"
     ]
    }
   ],
   "source": [
    "amount = 4 \n",
    "cost = 2\n",
    "cost += 2\n",
    "print(amount * cost)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "55.0\n"
     ]
    }
   ],
   "source": [
    "age = 22 \n",
    "AGE = 44 \n",
    "age /= 2\n",
    "print(age + AGE)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1.6 INPUT FUNCTIONS \n",
    "We use input functions to take inputs from users. \n",
    "\n",
    "In bash, we use ==== read\n",
    "In python, we use ==== input"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hey Abraham\n"
     ]
    }
   ],
   "source": [
    "name = input(\"What's your name? \")\n",
    "print(\"Hey \" + name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hey Tunde\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "unsupported operand type(s) for -: 'int' and 'str'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32mc:\\Users\\jngha\\OneDrive\\Desktop\\PythonTeach\\AcadaPython_Class_2022.ipynb Cell 35\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      <a href='vscode-notebook-cell:/c%3A/Users/jngha/OneDrive/Desktop/PythonTeach/AcadaPython_Class_2022.ipynb#X55sZmlsZQ%3D%3D?line=2'>3</a>\u001b[0m \u001b[39mprint\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39mHey \u001b[39m\u001b[39m\"\u001b[39m \u001b[39m+\u001b[39m name)\n\u001b[0;32m      <a href='vscode-notebook-cell:/c%3A/Users/jngha/OneDrive/Desktop/PythonTeach/AcadaPython_Class_2022.ipynb#X55sZmlsZQ%3D%3D?line=3'>4</a>\u001b[0m birth_year \u001b[39m=\u001b[39m \u001b[39minput\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39mPlease enter your year of birth: \u001b[39m\u001b[39m\"\u001b[39m)\n\u001b[1;32m----> <a href='vscode-notebook-cell:/c%3A/Users/jngha/OneDrive/Desktop/PythonTeach/AcadaPython_Class_2022.ipynb#X55sZmlsZQ%3D%3D?line=4'>5</a>\u001b[0m age \u001b[39m=\u001b[39m \u001b[39m2022\u001b[39;49m \u001b[39m-\u001b[39;49m birth_year\n\u001b[0;32m      <a href='vscode-notebook-cell:/c%3A/Users/jngha/OneDrive/Desktop/PythonTeach/AcadaPython_Class_2022.ipynb#X55sZmlsZQ%3D%3D?line=5'>6</a>\u001b[0m \u001b[39mprint\u001b[39m(age)\n",
      "\u001b[1;31mTypeError\u001b[0m: unsupported operand type(s) for -: 'int' and 'str'"
     ]
    }
   ],
   "source": [
    "# We want to write a code to compute users' ages\n",
    "name = input(\"What's your name? \")\n",
    "print(\"Hey \" + name)\n",
    "birth_year = input(\"Please enter your year of birth: \")\n",
    "age = 2022 - birth_year\n",
    "print(age)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hey Susan\n",
      "52\n"
     ]
    }
   ],
   "source": [
    "name = input(\"What's your name? \")\n",
    "print(\"Hey \" + name)\n",
    "birth_year = int(input(\"Please enter your year of birth: \"))\n",
    "age = 2022 - birth_year\n",
    "print(age)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hey Dela\n",
      "42\n"
     ]
    }
   ],
   "source": [
    "name = input(\"What's your name? \")\n",
    "print(\"Hey \" + name)\n",
    "birth_year = input(\"Please enter your year of birth: \")\n",
    "age = 2022 - int(birth_year)\n",
    "print(age)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please follow the instructions on the screen to compute your numbers\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "invalid literal for int() with base 10: '10.2'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32mc:\\Users\\jngha\\OneDrive\\Desktop\\PythonTeach\\AcadaPython_Class_2022.ipynb Cell 38\u001b[0m in \u001b[0;36m<cell line: 4>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      <a href='vscode-notebook-cell:/c%3A/Users/jngha/OneDrive/Desktop/PythonTeach/AcadaPython_Class_2022.ipynb#X61sZmlsZQ%3D%3D?line=0'>1</a>\u001b[0m \u001b[39m# Let's write a simple code to be used as a calculator.\u001b[39;00m\n\u001b[0;32m      <a href='vscode-notebook-cell:/c%3A/Users/jngha/OneDrive/Desktop/PythonTeach/AcadaPython_Class_2022.ipynb#X61sZmlsZQ%3D%3D?line=2'>3</a>\u001b[0m \u001b[39mprint\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39mPlease follow the instructions on the screen to compute your numbers\u001b[39m\u001b[39m\"\u001b[39m)\n\u001b[1;32m----> <a href='vscode-notebook-cell:/c%3A/Users/jngha/OneDrive/Desktop/PythonTeach/AcadaPython_Class_2022.ipynb#X61sZmlsZQ%3D%3D?line=3'>4</a>\u001b[0m first_num \u001b[39m=\u001b[39m \u001b[39mint\u001b[39;49m(\u001b[39minput\u001b[39;49m(\u001b[39m\"\u001b[39;49m\u001b[39mEnter your first number: \u001b[39;49m\u001b[39m\"\u001b[39;49m))\n\u001b[0;32m      <a href='vscode-notebook-cell:/c%3A/Users/jngha/OneDrive/Desktop/PythonTeach/AcadaPython_Class_2022.ipynb#X61sZmlsZQ%3D%3D?line=4'>5</a>\u001b[0m second_num \u001b[39m=\u001b[39m \u001b[39mint\u001b[39m(\u001b[39minput\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39mEnter your second number: \u001b[39m\u001b[39m\"\u001b[39m))\n\u001b[0;32m      <a href='vscode-notebook-cell:/c%3A/Users/jngha/OneDrive/Desktop/PythonTeach/AcadaPython_Class_2022.ipynb#X61sZmlsZQ%3D%3D?line=5'>6</a>\u001b[0m \u001b[39msum\u001b[39m \u001b[39m=\u001b[39m first_num \u001b[39m+\u001b[39m second_num\n",
      "\u001b[1;31mValueError\u001b[0m: invalid literal for int() with base 10: '10.2'"
     ]
    }
   ],
   "source": [
    "# Let's write a simple code to be used as a calculator.\n",
    "\n",
    "print(\"Please follow the instructions on the screen to compute your numbers\")\n",
    "first_num = int(input(\"Enter your first number: \"))\n",
    "second_num = int(input(\"Enter your second number: \"))\n",
    "sum = first_num + second_num\n",
    "print(\"The sum of your two numbers is: \" + str(sum))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please follow the instructions on the screen to compute your numbers\n",
      "The sum of your two numbers is: 30.0\n"
     ]
    }
   ],
   "source": [
    "print(\"Please follow the instructions on the screen to compute your numbers\")\n",
    "first_num = float(input(\"Enter your first number: \"))\n",
    "second_num = float(input(\"Enter your second number: \"))\n",
    "sum = first_num + second_num\n",
    "print(\"The sum of your two numbers is: \" + str(sum))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Break Assignment: \n",
    "What is the output of the following code:\n",
    "\n",
    "inputString = input(\"Enter a string: \")\n",
    "print(inputString, sep='#', end='&')\n",
    "\n",
    "Take Home Assignment:\n",
    "In bash, when we want to take a secret text, we run read -s. \n",
    "How do we do the same in Python? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Acada # Learning &"
     ]
    }
   ],
   "source": [
    "inputString = input(\"Enter a string: \")\n",
    "do_it = input(\"Please enter what you want to do: \")\n",
    "print(inputString, do_it, sep=' # ', end=' &')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1.7 STRING\n",
    "String is a collection of alphabets, words or other characters. \n",
    "It is one of the primitive data structures and are the building \n",
    "blocks for data manipulation. Python has a built-in string class \n",
    "named str . Python strings are \"immutable\" which means they cannot \n",
    "be changed after they are created.\n",
    "\n",
    "examples of strings: \n",
    "x = \"10.0.0.26\"\n",
    "y = \"50\"\n",
    "name = \"Acada Learning\" "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "18\n",
      "D\n",
      "i\n",
      "Dev\n",
      "DevOps Engineering\n",
      "DevOps Engineering\n"
     ]
    }
   ],
   "source": [
    "course = \"DevOps Engineering\"\n",
    "print(len(course))\n",
    "print(course[0])\n",
    "print(course[-3])\n",
    "print(course[0:3])\n",
    "print(course[:])\n",
    "print(course[0:])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We'll continue from Strings in the next class. \n",
    "\n",
    "HAPPY LEARNING!!"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.9.12 ('base')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "7d4e119998bf3d78d0b67ce87d5cc23f6589f6f4407e1fe5bc11cbb056480c52"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
