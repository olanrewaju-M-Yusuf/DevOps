AWS - AMAZON WEB SERVICES
=========================
Cloud Service Provider:


You do not need to have on-prem (on-premises) resources: Servers, Routers, etc

Company A (TD Bank):
  Time: 8am - 10am = 1000k users
        10am - 2pm = 2000k users
        2pm - 6pm = 1500k users
        6pm - 11pm = 750k users

  Capex: = very high
  OpEx: = high


  Cloud providers: - eg AWS came into the picture
  Lots of headache associated with on-prem configurations have been taken care of.


  - Autoscaling is achieved

Week 1: - I need 10GB of storage
Week 2: - I now require about 100GB of storage
Week 3: - I no longer require any storage

Concepts in Cloud Services:
  1. IAAS: Infrastructure as a Service
     For eg; EC2 instance, EBS, S3 buckets
  2. PAAS: Platfrom as a Service
     For eg; EKS (Elastic Kubernetes Service) - AWS manages the master node / control plane
  3. SAAS: Software as a Service 
     For eg; MS 365, SonarCloud, Github, AWS Cloudwatch
---
  IAAC: - Infrastructure as a Code
     For eg: Terraform, Ansible, Cloudformation

AWS has:
  - Regions: (for eg; us-east-1)
    - Availability Zones (AZ): For eg; us-east-1a, us-east-1b, us-east-1c

Considerations in creating resources in AWS:
  1. Pricing
  2. Latency
  3. Service availability
  4. Resource type
  5. User location
  6. Security and Compliance requirement in that area


Latency: This is the time/speed it takes a user to communicate with an application.
  - High Latency: higher communication time between a user and an app
  - Low Latency: <desired>

Types of Cloud Computing:
  - Public: AWS, GCP, MS Azure, IBM, Oracle, AliBaba
  - Private: on-prem
  - Hybrid: Combination of public and private cloud
  - Multi Cloud: For eg an organization utilizing the service of more than 1 cloud provider (eg AWS and GCP/MS Azure)


AWS:
  EC2: - Elastic Cloud Compute
  EBS: - Elastic Block Storage
  EFS: - Elastic File System
  S3 Bucket: - Simple Storage Service
  VPC: - Virtual Private Cloud;
      - Subnets
      - NAT Gateway,
      - IGW - Internet Gateway
      - Route Tables
      - etc
  ECR: - Elastic Container Registry
  IAM: - Identity and Access Management
  ELB: - Elastic Load Balancer
  ASG: - Auto Scaling Group
  Route53: 
  Cloudformation:

DNS: - Domain Name Service

172.10.12.14:80        www.facebook.com

DNS: ayodeji.com
CNAME: app.ayodeji.com ----> elb.hadcvkbiudslb.673256248498@elb:80 ----> 172.10.12.14:80


.............................
EC2: - Elastic Cloud Compute
-----------------------------
By default, an EC2 instance comes with an EBS volume / instance volume
- When the instance is terminated, by default, the default EBS volume gets terminated as well

If you create an EBS volume and attache it to an EC2 instance
- When the instance is terminated, the EBS volume remains (persistent)


Intance Pricing/Purchasing options:
  1. On demand
  2. Reserved
  -------dedicated host
  3. Spot
    - 70% usage capacity (USED)
    - 30% spare capacity
      - 10% can be placed as contingency
      - 20% goes into auction
        - ClientX - $5,000
        - ClientY - $9,000
        - ClientZ - $11,000 (Bid winner)

        - ClientW - $15,000 (New bid winner)

AMI: - Amazon Machine Image

IP Addressing:
  1. PrivateIP
     - This IP does not change .... it is permanent
  2. PublicIP
     - This changes when you terminate and restart an instance
  3. ElasticIP
     -  This makes the PublicIP permanent


Download: drawio

========================================================================================
Dec-17-2023
=====================================
  EBS: - Elastic Block Storage
  EFS: - Elastic File System
  S3 Bucket: - Simple Storage Service

EBS: - Elastic Block Storage:
  - This is an AZ resilient service
  - Allows for database backup/storage
  - Allows for data persistency
  - Gives room for volume expansion (expansion is done upwards only)
  - Snapshots can be created
    - By default, AWS stores the snapshot in an AWS managed S3 bucket

Labs:
  - Provisioned an EC2 instance in us-east-1a
    - The default EBS volume is in us-east-1a (vol-0c6d980533c06be81)
    - Newly created volume: c8-ebs (vol-062b987695072d373)

Key.pem: = c8-test.pem
PubIP: 18.206.247.244


AWS Documentation: https://docs.aws.amazon.com/index.html

Mounting and EBS volume to an EC2 instance:
  https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-using-volumes.html

Format the EBS volume:
  sudo file -s /dev/xvdf

Create a file system:
  sudo mkfs -t xfs /dev/xvdf

Mount the volume:
  sudo mount /dev/xvdf /var/lib/jenkins

Summary:
  EBS:
    1. Provisioned an EC2 instance
    2. Created an EBS volume
    3. Attached the EBS volume to the EC2 instance (via the console)
    4. Formatted the EBS volume
    5. Created a file system
    6. Mounted the EBS volume to the EC2 instance

  Creating a Snapshot:
    1. Created a snapshot from the EBS volume in us-east-1a
    2. Created a volume from the snapshot and sent that to us-east-1b


EFS - Elastic File System:
  - Scalable: in and out
  - Simple:
  - Elastic:
  - Cloud-native NFS file system:
    - EFS: Linux based OS
    - FSx: Windows based OS

Created the servers: (us-east-1a): c8-test.pem
  - buildServer (54.204.73.173):
      ssh -i "c8-test.pem" ec2-user@54.204.73.173
  - appServer (52.91.35.109):
      ssh -i "c8-test.pem" ec2-user@52.91.35.109
  - webServer (54.88.126.9):
      ssh -i "c8-test.pem" ec2-user@54.88.126.9

  Other commands: 
    sudo hostname <>
    sudo su - ec2-user

Steps:
  1. mkdir efs (this was carried out on all servers)
  2. The NFS agent to be installed on all servers:
     - sudo yum install nfs-utils nfs4-acl-tools -y
  3. Mounting using the NFS client from the EFS console:
     - sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport fs-02560823614c09798.efs.us-east-1.amazonaws.com:/ efs
  4. cd efs (on all servers)
  5. Create any file / directory on server1 and view these files/directories on server2 and server3


EFS Documentation:
  https://docs.aws.amazon.com/efs/latest/ug/installing-amazon-efs-utils.html

Recommended Course:
  Udemy / Coursera:
    - AWS Solution Architect Associate
    - AWS Cloud Practioner


S3 Bucket: Simple Storage Service
  Used for object storage
    - Images
    - Videos
    - EBS Snapshots
    - Logs from websites etc

  Properties:
    - Maximum object storage size = 5TB
    - A maximum of 100 buckets (soft limit) can be created in an AWS account
    - S3 bucket names must be globally unique
    - S3 bucket allows versioning
    - S3 bucket is a region resilient service but global in nature

  S3 Bucket Payment Plans:
    - Standard --> most expensive
    - Infrequent Access (IA)
    - Reduced Redundancy Storage (RRS)
    - Glacier ---> least expensive


  What AWS sees in the S3 bucket are just objects not folders:
    - maxresdefault.jpg
    - /test/maxresdefault.jpg


===================================================================================

Virtual Private Cloud (VPC):
  - Regional Service in AWS

Subnets:
  - Subsets of VPCs, ie it is within a VPC
  - You can create a maximum of 200 subnets in a VPC
  - Subnets are AZ resilient

Types of Subnets:
  - Public Subnet:
    - jumpServer/Bastion Host, Load Balancer, webServer/apacheServer
  - Private Subnet:
    - dbServer, CICDServer, appServer

User ----> webServer ----> appServer ----> dbServer

DNS: - Domain Name Service

172.10.12.14:80        www.rbc.com   

DNS: ayodeji.com
CNAME: www.rbc.com/login ----> elb.hadcvkbiudslb.673256248498@elb:80 ----> 172.10.12.14:80


CIDR Block:
  Classless Inter-Domain Routing
  - It is a method of allocating IP addresses and routing within subnets/VPC 


AWS CIDR Block Options:
- 10.x.x.x/n
- 172.x.x.x/n
- 192.x.x.x/n

Where x == 0 - 255

CIDR Block Format for an IPv4:
  xx.xx.xx.xx/n where n: = subnet prefix

Number of IP addresses for a VPC: 2^(32-n)

Number of IP addresses for a VPC in a use case...for having 200 servers/resources:
if n=16, 2^(32-16) = 2^(16) = 65,536 IP addresses
   n=23, 2^(32-23) = 2^(9) = 512 IP addresses
   n=24, 2^(32-24) = 2^(8) = 256 IP addresses ==== This is selected
   n=25, 2^(32-25) = 2^(7) = 128 IP addresses
   n=26, 2^(32-26) = 2^(6) = 64 IP addresses


VPC CIDR Block: 10.0.0.0/24   ----> to create 200 resources

NB: By default, AWS holds/keeps about 5-6 IP addresses in the backend to run other process/infra


Subnet: We want to have equal distribution of resources in the Public and Private Subnet
  1. Public Subnet: = 10.0.0.0/25
                      n=25, 2^(32-25) = 2^(7) = 128 IP addresses
                      10.0.0.0, 10.0.0.1, 10.0.0.2,......., 10.0.0.127
                      public-sn-c8 (us-east-1a)
  2. Private Subnet: = 10.0.0.128/25
                      n=25, 2^(32-25) = 2^(7) = 128 IP addresses
                      10.0.0.128, 10.0.0.129, 10.0.0.130,....., 10.0.0.255
                      private-sn-c8 (us-east-1b)

LABS:


  vpc: cohort8-vpc us-east-1 (N.Virginia)
  subnets:

jumpServer: PrivateIP: 10.0.0.67

  ssh -i "c8-test.pem" ec2-user@54.235.235.52


appServer: 

  ssh -i "c8-test.pem" ec2-user@10.0.0.207


Copy the key.pem from your local to the jumpServer:
  scp -i c8-test.pem c8-test.pem ec2-user@jumpServerIP:/home/ec2-user

  scp -i c8-test.pem c8-test.pem ec2-user@54.235.235.52:/home/ec2-user


To prove we have internet connectivity to the jumpServer:

  "ping google.com"

Change the permissions for the key.pem file:

  chmod 400 c8-test.pem

====================================================================================

VPC Peering:
  VPC CIDR Block:
    A: 10.0.0.0/24

    B: 172:0.0.0/24

VPC-1 us-east-1 (cohort8-vpc1): 10.0.0.0/24: c8-test.pem
  - Public Subnet:
    - jumpServer/Bastion Host (3.91.203.84), Load Balancer, webServer/apacheServer
  - Private Subnet:
    - dbServer, CICDServer, appServer

cli: ssh -i "c8-test.pem" ec2-user@3.91.203.84


VPC-2 us-east-2 (cohort8-vpc2): 172.0.0.0/24: c8-vpc2.pem
  - Private Subnet: 172.0.0.0/25
    - dbServer1, jenkinsServer, appServers

appServer4: 172.0.0.8

cli: ssh -i "c8-vpc2.pem" ec2-user@172.0.0.8


Copy the key.pem from your local to the jumpServer:
  scp -i c8-test.pem c8-vpc2.pem ec2-user@jumpServerIP:/home/ec2-user

  scp -i c8-test.pem c8-vpc2.pem ec2-user@3.91.203.84:/home/ec2-user
  ssh -i "c8-test.pem" ec2-user@3.91.203.84

  chmod 400 c8-vpc2.pem

  ssh -i "c8-vpc2.pem" ec2-user@appServer4

  ssh -i "c8-vpc2.pem" ec2-user@172.0.0.8

Summary:
  Peer VPC-1 to VPC-2:
  - Create a Peering Connection from region 1 (vpc-1)
  - Go to region 2 (vpc-2) and accept the peering connection
  - In region 2, edit all route tables to have a communication from vpc-1 CIDR block
    - DestinationIP: vpc-1 CIDR Block
    - Target: Peering Connection
  - In region 1, edit all route tables to have a communication from vpc-2 CIDR block
    - DestinationIP: vpc-2 CIDR Block
    - Target: Peering Connection

Whenever we have access issues:
  1. Networking
     - Routing
  2. Firewall/Security
     - Security Group (Security at the instance level)
     - Network Access Control List (NACL) - Security at the subnet/vpc level


NACL: Network Access Control List
     - Regional Service
     - Created in a VPC 
     - Protects the subnet
 ACL: Access Control List
     - Peculiar to S3 buckets

For peering 2 VPCs:
  - Peering Connection
For peering multiple VPCs:
  - Peering Connection
  - Transit Gateway

================================================================

Load Balancer:

  Server Side:
    DevOps Engineer:
      ssh(22) ----------> jumpServer ----> appServer/dbServer

  Client Side: End users accessing the application
      http/https (80/443):
      users/clients -----> loadbalancer/webServer ----> appServer

  webServers: self Managed
    - apache webServer
    - NGINX
    - HAProxy

  For NGINX:
    1. Create an EC2 instance
    2. Install NGINX
    3. Configure NGINX

Service Types:
  1. Monolithic Services:
    Login Page
    Cart page
    Order page
    NB: The login, cart and order pages are all written in 1 source code.
        They are built as 1 package
        - You might have 10,000 lines of code for the built package
 
  2. Microservice:
    Login Page ---> login-api
    Cart page  ---> cart-api
    Order page ---> order-api
    NB: Individual pages will have individual source codes.
        They are built as independent packages
        - You might just have about 450 lines of code for each

Elastic Load Balancers (ELB): Cloud Managed
  1. Application Load Balancers (ALB):
     - This allows traffic distribution to multiple target groups
     - Traffic routing is quick
     - http & https
  2. Network Load Balancer (NLB):
     - Allows traffic to just 1 target group
     - Traffic routing is quicker
     - TCP workloads
  3. Gateway Load Balancer (GLB):
  4. Classic Load Balancer (CLB):

Load Balancer:
https://docs.aws.amazon.com/AmazonECS/latest/developerguide/load-balancer-types.html

NB: By default, AWS requires you to select a minimum of 2 AZ and/or subnets while provisioning your LB

=================================================================================

CloudTrail
AWS Config

==================================================================================
#!/bin/bash
cd /opt 
sudo yum install git wget -y
sudo yum install java-1.8.0-openjdk-devel -y
sudo wget https://dlcdn.apache.org/tomcat/tomcat-10/v10.1.4/bin/apache-tomcat-10.1.4.tar.gz
sudo tar -xvf apache-tomcat-10.1.4.tar.gz
sudo rm apache-tomcat-10.1.4.tar.gz
sudo mv apache-tomcat-10.1.4 tomcat10
sudo chmod 777 -R /opt/tomcat10
sudo sh /opt/tomcat10/bin/startup.sh
sudo ln -s /opt/tomcat10/bin/startup.sh /usr/bin/starttomcat
sudo ln -s /opt/tomcat10/bin/shutdown.sh /usr/bin/stoptomcat
sudo starttomcat

=========================================================


VPC - SUBNETS -ELB -SERVERS:
  Region: us-west-2: Oregon

  VPC: ==1
    - cohort8-vpc
  CIDR Block: 10.0.0.0/25 ; n=25, 2^(32-25) = 2^(7) = 128 IP addresses
  Subnets: 
    2 Public Sunbets:
      - 10.0.0.0/27 ; n=27, 2^(32-27) = 2^(5) = 32 IP addresses
        - public-sn-a: us-west-2a: 10.0.0.0/27: 10.0.0.0 ------ 10.0.0.31
        - public-sn-b: us-west-2b: 10.0.0.32/27: 10.0.0.32 ------ 10.0.0.63
    2 Private Subnets:
      - 10.0.0.0/27 ; n=27, 2^(32-27) = 2^(5) = 32 IP addresses
        - private-sn-a: us-west-2a: 10.0.0.64/27: 10.0.0.64 ------ 10.0.0.95
        - private-sn-b: us-west-2b: 10.0.0.96/27: 10.0.0.96 ------ 10.0.0.127

  Internet Gateway:
    - c8-igw
    - Attach to the VPC

  Route Tables:
    - c8-rt-public
      - Associate with the public-sn-a and public-sn-b
      - Add route: 
        - Destination: 0.0.0.0/0
        - Target: igw-c8
    - c8-rt-private
      - Associate with the private-sn-a and public-sn-b
      - Add route: 
        - Destination: 0.0.0.0/0
        - Target: c8-nat
 
  NAT Gateway:
    - c8-nat
    - associate with public-sn-a
    - Allocate an elastic IP

  Instances:
    - Key.pem: c8.pem
  
  jumpServer: public-sn-a
    PublicIP: 52.89.148.45
    PrivateIP: 10.0.0.15

  ssh -i "c8.pem" ec2-user@52.89.148.45
  
  appServer1: private-sn-a
  appServer2: private-sn-a
    - Had the tomcat installation script in `User Data`
    - Opened port 8080 in the instances

  appServer3: private-sn-b
  appServer4: private-sn-b
    - Had the tomcat installation script in `User Data`
    - Opened port 8080 in the instances

  scp -i c8.pem c8.pem ec2-user@jumpServerIP:/home/ec2-user

  scp -i c8.pem c8.pem ec2-user@52.89.148.45:/home/ec2-user
  
  chmod 400 c8.pem


  ssh -i "c8.pem" ec2-user@10.0.0.84
  ssh -i "c8.pem" ec2-user@10.0.0.72
  ssh -i "c8.pem" ec2-user@10.0.0.105
  ssh -i "c8.pem" ec2-user@10.0.0.102

  To check if the Tomcat Application is running:
    curl -L <appServerIP>:8080

  curl -L 10.0.0.84:8080
  curl -L 10.0.0.72:8080
  curl -L 10.0.0.105:8080
  curl -L 10.0.0.102:8080

LoadBalancers:
  1. Application Load Balancers (ALB):
     - This allows traffic distribution to multiple target groups
     - Traffic routing is quick
     - http & https
  2. Network Load Balancer (NLB):
     - Allows traffic to just 1 target group
     - Traffic routing is quicker
     - TCP workloads

  Provisioning:
    Network Load Balancer (NLB):
      - c8-nlb
      - DNS Name: c8-nlb-e9b91a9b19185fc1.elb.us-west-2.amazonaws.com

      Target Group:
        - targetgroup-1

      Port/Protocol: 80/TCP

    Application Load Balancer (NLB):
      - c8-alb
      - DNS Name: c8-alb-548843357.us-west-2.elb.amazonaws.com

      Target Group:
        - targetgroup-a
        - targetgroup-b

      Port/Protocol:
        - http: 80
        - https: 443


To view details of the load balancers:
  ssh into the jumpServer:
    nslookup <loadbalancerDNSName>
    nslookup c8-nlb-e9b91a9b19185fc1.elb.us-west-2.amazonaws.com
      - 10.0.0.2
      - 10.0.0.53
      - 54.212.130.210
    nslookup c8-alb-548843357.us-west-2.elb.amazonaws.com
      - 35.160.237.90
      - 52.26.94.64

User 

www.facebook.com -----> <loadbalancerDNSName> ---> targetgroup (appServer)

2 Tier Application:
  User ---> hostName=elb ----> application

3 Tier Application:
  User ---> hostName=elb ----> application ----> database


Route 53:
========

login.acadalearning.ca ---> c8-alb-548843357.us-west-2.elb.amazonaws.com ----> 


==========================
Auto Scaling Group (ASG):
 - Automatic means for AWS to scale in or scale out EC2 instances, IPs etc.
 - Self Healing Capabilties are ensured.

asg Concepts:
  We can set the following:
    - Desired  eg 1
    - Minimun  eg 1
    - Maximum  eg 4

  Launch Configuration/Launch Template:
    - Utilize the user data to configure our EC2 instances
    - Golden AMI:
      - Creating an image from a running EC2 instance
      - You can specify the user data to start the service 

#!/bin/bash
sudo chmod 777 -R /opt/tomcat10
sudo starttomcat

ASG:
  - c8-asg

Launch Configuration:
  - c8-launchconfiguration-1

  Create a Golden AMI 
  - c8-tomcat

ASG Scaling Plans:
  - CPU Utilization
  - Request counts etc 

=============================================================================
IAM
Cloudformation
==============================================================================

IAM: Identity and Access Management:
  10 Team members:
    DevOps Engineers: ---> Ayo, Mary, Francisca
      VpcFullAccess, EC2FullAccess, "Route53FullAccess"
    Developers: ---> John, Judith
      VpcReadAccess, EC2ReadAccess, EC2CreateAccess
    Testers: ---> David, Patricia

Permissions: Access given to any service in AWS for eg  ec2:*

Policies: These are specific permissions assigned to AWS resources
         - These are a collection of permissions

Users: Members managing or accessing AWS resources

Groups: These are objects comprised of users
       - Policies can be attached to groups
       - Users in the groups inherit the policies attached to the group

Roles: - These are policies attached to AWS resources

Log into AWS:
  1. AWS Management Console Access:
     - username-rootuser:
     - username-iamuser: ayo
     - password: admin@123
   
  2. Programmatic access: Access via the AWS CLI:
     - accountID: 717621813633
     - accessKeyID: AKIA2OFMX4GAZRTUNAUA
     - secretAccesKey: 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

    https://717621813633.signin.aws.amazon.com/console


AWS CLI Installation / Cheat Sheet:
 1. https://docs.aws.amazon.com/cli/latest/index.html

 2. https://docs.aws.amazon.com/cli/v1/userguide/install-macos.html

 3. https://gist.github.com/apolloclark/b3f60c1f68aa972d324b

 4. https://www.bluematador.com/learn/aws-cli-cheatsheet

 5. https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html

NB: A rule of thumb: Users/Groups should be granted least privileges

========================================================================
Cloud Formation (CF):

  https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html

- An infrastructure as a code (IaaC) tool owned by AWS
- The scripting language is YAML
- You can create resources in any region in AWS
- Codes are reusable
- Updates can be made to codes to provision or terminate resources in AWS

Steps in deployong resources via CFN:
  - You have to create a stack 
  - Deploy resources to the stack 

AWS Github Repo:
  https://github.com/awslabs/aws-cloudformation-templates/tree/master/aws/services

Examples:
  
https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html